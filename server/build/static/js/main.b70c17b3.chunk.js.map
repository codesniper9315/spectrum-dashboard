{"version":3,"sources":["hooks/useWindowSize.ts","serviceWorker.ts","views/home/HomeView/colors.ts","constants.ts","views/home/HomeView/SystemGantt.tsx","views/home/HomeView/UserGantt.tsx","views/home/HomeView/SystemMenus.tsx","views/home/HomeView/BandMenus.tsx","views/home/HomeView/Spectrum.tsx","views/home/HomeView/Content.tsx","views/home/HomeView/Alert.tsx","views/home/HomeView/index.tsx","components/LoadingScreen.tsx","routes.tsx","App.tsx","index.tsx","utils/formatDate.ts"],"names":["useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","colorSet","SYSTEMS_FILE","columns","id","name","INIT_Y_AXIS","y_start","y_stop","y_step","SystemGantt","scope","band","source","setSource","traces","setTraces","startDate","setStartDate","yAxis","setYAxis","rows","setRows","size","sheetList","req","XMLHttpRequest","open","responseType","onload","e","data","Uint8Array","response","workbook","xlsx","type","SheetNames","forEach","item","worksheetList","worksheet","sheet_to_json","Sheets","header","el","index","push","_","object","Object","keys","filter","Chart_Type","Item_No","send","x_start","traceList","preItem","includes","length","SDate","X_Axis_Start","Y_Axis_Step_Size","Y_Axis_Start","Y_Axis_Stop","dt","item_date","Date","c_date","y_point","SFreq_GHz","Math","abs","EFreq_GHz","isLegend","d","idx","System","trace","x","formatDate","EDate","y","mode","line","color","showlegend","marker","shape","Grid","container","alignItems","justify","spacing","md","Typography","variant","component","layout","xaxis","title","titlefont","tickfont","range","dtick","showgrid","zerolinecolor","zerolinewidth","yaxis","legend","orientation","xanchor","traceorder","font","family","bordercolor","borderwidth","tracegroupgap","margin","l","b","r","t","pad","displayModeBar","TableContainer","style","maxHeight","Table","stickyHeader","aria-label","className","TableHead","TableRow","map","column","TableCell","key","align","toUpperCase","TableBody","row","hover","split","join","toFixed","start","end","UserGantt","system","result","User","useStyles","makeStyles","theme","root","textAlignLast","default","colors","grey","opacity","SystemMenus","onChange","systems","setSystems","classes","sdata","Select","value","event","target","clsx","defaultValue","fullWidth","MenuItem","disabled","BandMenus","status","onUids","bands","setBands","tuids","calWidth","getStyle","len","vertical","writingMode","backgroundColor","hex","minHeight","transform","textAlign","position","grid","content","right","top","block","display","flexDirection","justifyContent","border","cursor","scoped","red","service","fontSize","typography","pxToRem","remark","announce","marginTop","box","clicked","boxShadow","shadows","zIndex","Spectrum","uids","onContent","dataSource","setDataSource","setLength","page","setPage","totalPage","setTotalPage","master","handleInit","pointS","pointF","values","Box","borderColor","blue","data-start","data-end","amount","Tooltip","arrow","onClick","handleClick","truncated","Pagination","count","ceil","defaultPage","Content","borderRadius","padding","Transition","forwardRef","props","ref","Slide","direction","marginBottom","Alert","matches","useMediaQuery","Dialog","TransitionComponent","keepMounted","CssBaseline","DialogTitle","DialogContent","DialogContentText","initialStatus","card","Header","HomeView","setStatus","setUids","setContent","handleChange","prevState","Container","maxWidth","Card","CardHeader","CardContent","palette","background","LoadingScreen","NProgress","done","LinearProgress","routes","exact","path","lazy","to","jss","create","plugins","jssPreset","history","createBrowserHistory","App","StylesProvider","dense","maxSnack","renderRoutes","fallback","route","i","Component","render","enableES5","ReactDOM","document","getElementById","URL","process","href","origin","fetch","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","delta","sDate","floor","lDate","getDate","dd","yyyy","getFullYear","mon","getMonth"],"mappings":"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","file":"static/js/main.b70c17b3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useWindowSize = () => {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const colorSet = [\r\n  '#808000',\r\n  '#FFFF00',\r\n  '#00FF00',\r\n  '#00FFFF',\r\n  '#FF00FF',\r\n  '#0000FF',\r\n  '#FF0000',\r\n  '#000080',\r\n  '#008080',\r\n  '#008000',\r\n  '#800080',\r\n  '#800000',\r\n  '#808080',\r\n  '#FEC433',\r\n  '#C0C0C0'\r\n];\r\n","export const SERVER_URL = 'http://52.254.23.171:7000/api';\n\nexport const LOCAL_URL = 'http://127.0.0.1:7000/api';\n\nexport const BASE_URL =\n  process.env.NODE_ENV === 'production' ? SERVER_URL : LOCAL_URL;\n\nexport const SYSTEMS_FILE = 'static/excel/systems_dataset_v1.xlsx';\n\nexport const USER_FILE = 'static/excel/users_dataset_v1.xlsx';\n\nexport const DATA_FILE = 'static/excel/dataset_v1.xlsx';\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plot from 'react-plotly.js';\r\nimport * as xlsx from 'xlsx';\r\nimport _ from 'underscore';\r\nimport {\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { colorSet } from './colors';\r\nimport useWindowSize from 'src/hooks/useWindowSize';\r\nimport formatDate from 'src/utils/formatDate';\r\nimport { SYSTEMS_FILE } from 'src/constants';\r\nimport { Chart } from 'src/types/system';\r\n\r\ninterface SystemGanttProps {\r\n  className?: string;\r\n  scope: number;\r\n  band: string;\r\n}\r\n\r\nconst columns = [\r\n  { id: 'no', name: 'no' },\r\n  { id: 'System', name: 'system' },\r\n  { id: 'Chart_Type', name: 'band' },\r\n  { id: 'Link_Type', name: 'link type' },\r\n  { id: 'SFreq_GHz', name: 'min freq (ghz)' },\r\n  { id: 'EFreq_GHz', name: 'max freq (ghz)' },\r\n  { id: 'SDate', name: 'start date' },\r\n  { id: 'EDate', name: 'end date' }\r\n];\r\n\r\nconst INIT_Y_AXIS = {\r\n  y_start: 0,\r\n  y_stop: 0,\r\n  y_step: 0\r\n};\r\n\r\nconst SystemGantt: FC<SystemGanttProps> = ({ scope, band }) => {\r\n  const [source, setSource] = useState([]);\r\n  const [traces, setTraces] = useState([]);\r\n  const [startDate, setStartDate] = useState(0);\r\n  const [yAxis, setYAxis] = useState(INIT_Y_AXIS);\r\n  const [rows, setRows] = useState([]);\r\n  const size = useWindowSize();\r\n\r\n  useEffect(() => {\r\n    let sheetList: Object = {};\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n\r\n      workbook.SheetNames.forEach(item => {\r\n        let worksheetList = [];\r\n        let worksheet: any = xlsx.utils.sheet_to_json(workbook.Sheets[item], {\r\n          header: 1\r\n        });\r\n        sheetList[item] = [];\r\n\r\n        worksheet.forEach((el: any, index: number) => {\r\n          if (index > 0) worksheetList.push(_.object(worksheet[0], el));\r\n        });\r\n        sheetList[item] = worksheetList;\r\n      });\r\n\r\n      sheetList[Object.keys(sheetList)[0]].forEach(item => {\r\n        item['data'] = sheetList[Object.keys(sheetList)[1]].filter(\r\n          el => el.Chart_Type === band && el.Item_No === scope\r\n        );\r\n      });\r\n      setSource(sheetList[Object.keys(sheetList)[0]]);\r\n    };\r\n\r\n    req.send();\r\n  }, [scope, band]);\r\n\r\n  useEffect(() => {\r\n    let x_start = 0,\r\n      y_start = 0,\r\n      y_step = 0,\r\n      y_stop = 0;\r\n    let traceList = [];\r\n\r\n    source.forEach((item: Chart) => {\r\n      let preItem = item;\r\n\r\n      if (item.Chart_Type === band) {\r\n        if (Object.keys(item).includes('data') && item.data.length > 0) {\r\n          x_start = item.data[0].SDate;\r\n        } else {\r\n          x_start = item.X_Axis_Start;\r\n        }\r\n\r\n        y_step = item.Y_Axis_Step_Size;\r\n        y_start = item.Y_Axis_Start;\r\n        y_stop = item.Y_Axis_Stop;\r\n\r\n        if (Object.keys(preItem).includes('data') && preItem.data.length > 0) {\r\n          item.data.forEach((dt, index) => {\r\n            let item_date = new Date(dt.SDate);\r\n            let c_date = new Date(x_start);\r\n            let y_point =\r\n              dt.SFreq_GHz + Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / 2;\r\n            let isLegend = true;\r\n\r\n            if (item_date < c_date) {\r\n              x_start = dt.SDate;\r\n            }\r\n\r\n            item.data.forEach((d, idx) => {\r\n              if (idx < index && d.System === dt.System) {\r\n                index = idx;\r\n                isLegend = false;\r\n              }\r\n            });\r\n\r\n            let trace = {\r\n              name: dt.System,\r\n              x: [formatDate(dt.SDate, 0), formatDate(dt.EDate, 0)],\r\n              y: [y_point, y_point],\r\n              mode: 'lines',\r\n              line: {\r\n                width:\r\n                  (Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / (y_step * 10)) * 340,\r\n                color: colorSet[index % colorSet.length]\r\n              },\r\n              showlegend: isLegend\r\n            };\r\n\r\n            traceList.push(trace);\r\n          });\r\n        } else {\r\n          let trace = {\r\n            name: '',\r\n            x: [x_start, x_start + 10],\r\n            y: [y_start, y_start],\r\n            mode: 'lines',\r\n            line: {\r\n              width: (Math.abs(y_start - y_stop) / (y_step * 10)) * 340,\r\n              color: 'transparent'\r\n            },\r\n            showlegend: false,\r\n            marker: {\r\n              size: 12,\r\n              shape: [\r\n                'line-ew',\r\n                'diamond-open',\r\n                'line-ew',\r\n                'line-ew',\r\n                'diamond-open',\r\n                'line-ew'\r\n              ]\r\n            }\r\n          };\r\n          traceList.push(trace);\r\n        }\r\n        setRows(item.data);\r\n      }\r\n    });\r\n    setTraces(traceList);\r\n    setStartDate(x_start);\r\n    setYAxis({ y_start, y_stop, y_step });\r\n  }, [band, source]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Typography variant=\"h6\" component=\"strong\">\r\n            Known LEO's supported by system\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Plot\r\n            data={traces}\r\n            layout={{\r\n              width: size.width * 0.7,\r\n              xaxis: {\r\n                title: '',\r\n                titlefont: {\r\n                  size: 10,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                range: [formatDate(startDate, -1), formatDate(startDate, 7)],\r\n                dtick: 'M12',\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              yaxis: {\r\n                title: 'Frequency (GHZ)',\r\n                titlefont: {\r\n                  size: 12,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                range: [yAxis.y_start, yAxis.y_stop],\r\n                dtick: yAxis.y_step,\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              legend: {\r\n                orientation: 'h',\r\n                xanchor: 'right',\r\n                x: 1,\r\n                traceorder: 'normal',\r\n                font: {\r\n                  family: 'sans-serif',\r\n                  size: 12,\r\n                  color: '#000'\r\n                },\r\n                bordercolor: '#212529',\r\n                borderwidth: 1,\r\n                tracegroupgap: 100\r\n              },\r\n              margin: {\r\n                l: 60,\r\n                b: 80,\r\n                r: 30,\r\n                t: 30,\r\n                pad: 5\r\n              },\r\n              showlegend: true\r\n            }}\r\n            config={{ displayModeBar: false }}\r\n          />\r\n        </Grid>\r\n        <Grid item md={12}>\r\n          <TableContainer style={{ maxHeight: 440 }}>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"sticky table\"\r\n              className=\"customized-gantt-chart-table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  {columns.map(column => (\r\n                    <TableCell key={column.id} align=\"center\">\r\n                      {column.name.toUpperCase()}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row, index) => (\r\n                  <TableRow\r\n                    hover\r\n                    key={`${row.Chart_Type.split(' ').join('_')}_${index}`}\r\n                  >\r\n                    {columns.map((column, idx) => (\r\n                      <TableCell key={column.id} align=\"center\">\r\n                        {idx !== 0\r\n                          ? column.id === 'SFreq_GHz' ||\r\n                            column.id === 'EFreq_GHz'\r\n                            ? row[column.id].toFixed(7)\r\n                            : column.id === 'SDate' || column.id === 'EDate'\r\n                            ? formatDate(row[column.id], 0)\r\n                            : row[column.id]\r\n                          : index + 1}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nSystemGantt.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default SystemGantt;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plot from 'react-plotly.js';\r\nimport * as xlsx from 'xlsx';\r\nimport {\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { colorSet } from './colors';\r\nimport useWindowSize from 'src/hooks/useWindowSize';\r\nimport formatDate from 'src/utils/formatDate';\r\nimport { USER_FILE } from 'src/constants';\r\n\r\ninterface UserGanttProps {\r\n  className?: string;\r\n  scope: number;\r\n  system: string;\r\n}\r\n\r\ninterface User {\r\n  User: string;\r\n  System: string;\r\n  SDate: Date;\r\n  EDate: Date;\r\n}\r\n\r\nconst columns = [\r\n  { id: 'no', name: 'no' },\r\n  { id: 'User', name: 'user' },\r\n  { id: 'System', name: 'system' },\r\n  { id: 'SDate', name: 'start date' },\r\n  { id: 'EDate', name: 'end date' }\r\n];\r\n\r\nconst INIT_Y_AXIS = {\r\n  start: 0,\r\n  end: 0\r\n};\r\n\r\nconst UserGantt: FC<UserGanttProps> = ({ scope, system }) => {\r\n  const [source, setSource] = useState([]);\r\n  const [traces, setTraces] = useState([]);\r\n  const [yAxis, setYAxis] = useState(INIT_Y_AXIS);\r\n  const size = useWindowSize();\r\n\r\n  useEffect(() => {\r\n    let result = [];\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', USER_FILE, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      const worksheet: any = xlsx.utils.sheet_to_json(\r\n        workbook.Sheets[workbook.SheetNames[1]],\r\n        {\r\n          header: 1\r\n        }\r\n      );\r\n\r\n      worksheet.forEach((item, idx: number) => {\r\n        if (idx > 0 && system === item[1])\r\n          result.push({\r\n            User: item[0],\r\n            System: item[1],\r\n            SDate: formatDate(item[2], 0),\r\n            EDate: formatDate(item[3], 0)\r\n          });\r\n      });\r\n      setSource(result);\r\n    };\r\n\r\n    req.send();\r\n  }, [scope, system]);\r\n\r\n  useEffect(() => {\r\n    const start = source.length / 5;\r\n    const end = (source.length / 5) * 4;\r\n    let traceList = [];\r\n\r\n    source.forEach((item: User, idx: number) => {\r\n      var trace = {\r\n        x: [item.SDate, item.EDate],\r\n        y: [item.User, item.User],\r\n        name: item.User,\r\n        mode: 'lines',\r\n        line: { width: 20, color: colorSet[idx % colorSet.length] }\r\n      };\r\n      traceList.push(trace);\r\n    });\r\n\r\n    setTraces(traceList);\r\n    setYAxis({ start, end });\r\n  }, [source]);\r\n\r\n  useEffect(() => {}, [traces]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Typography variant=\"h6\" component=\"strong\">\r\n            Known LEO's supported by system\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Plot\r\n            data={traces}\r\n            layout={{\r\n              width: size.width * 0.7,\r\n              xaxis: {\r\n                title: '',\r\n                titlefont: {\r\n                  size: 10,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                dtick: 'M12',\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              yaxis: {\r\n                titlefont: {\r\n                  size: 12,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                range: [yAxis.start, yAxis.end],\r\n                dtick: 1,\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              margin: {\r\n                l: 60,\r\n                b: 80,\r\n                r: 30,\r\n                t: 30,\r\n                pad: 5\r\n              },\r\n              showlegend: false\r\n            }}\r\n            config={{ displayModeBar: false }}\r\n          />\r\n        </Grid>\r\n        <Grid item md={12}>\r\n          <TableContainer style={{ maxHeight: 440 }}>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"sticky table\"\r\n              className=\"customized-gantt-chart-table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  {columns.map(column => (\r\n                    <TableCell key={column.id} align=\"center\">\r\n                      {column.name.toUpperCase()}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {source.map((row, index) => (\r\n                  <TableRow hover key={`user-row-${index}`}>\r\n                    {columns.map((column, idx) => (\r\n                      <TableCell key={column.id} align=\"center\">\r\n                        {idx === 0 ? index + 1 : row[column.id]}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nUserGantt.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default UserGantt;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as xlsx from 'xlsx';\r\nimport { Select, MenuItem, makeStyles, Theme, colors } from '@material-ui/core';\r\nimport { SYSTEMS_FILE } from 'src/constants';\r\n\r\ninterface SystemMenusProps {\r\n  className?: string;\r\n  system: string;\r\n  onChange: (name: string, value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    textAlignLast: 'center'\r\n  },\r\n  default: {\r\n    color: colors.grey[500],\r\n    opacity: 0.9\r\n  }\r\n}));\r\n\r\nconst SystemMenus: FC<SystemMenusProps> = ({ className, system, onChange }) => {\r\n  const [systems, setSystems] = useState<string[]>([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    let result: string[] = [];\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      const sdata = workbook.Sheets[workbook.SheetNames[1]];\r\n      const worksheet: any = xlsx.utils.sheet_to_json(sdata, { header: 1 });\r\n\r\n      worksheet.forEach((el: Array<any>, index: number) => {\r\n        index > 0 && !result.includes(el[0]) && result.push(el[0]);\r\n      });\r\n      setSystems(result);\r\n    };\r\n\r\n    req.send();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    systems.length > 0 && onChange('system', systems[0]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [systems]);\r\n\r\n  const handleChange = (event): void => {\r\n    const { name, value } = event.target;\r\n    onChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      name=\"system\"\r\n      value={system}\r\n      onChange={handleChange}\r\n      className={clsx(classes.root, className)}\r\n      defaultValue=\"none\"\r\n      fullWidth\r\n    >\r\n      <MenuItem value=\"none\" className={classes.default} disabled>\r\n        Select System\r\n      </MenuItem>\r\n      {systems.map((item: string) => (\r\n        <MenuItem value={item} key={item}>\r\n          {item}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSystemMenus.propTypes = {\r\n  className: PropTypes.string,\r\n  system: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default SystemMenus;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as xlsx from 'xlsx';\r\nimport { Select, MenuItem, makeStyles, Theme, colors } from '@material-ui/core';\r\nimport { SYSTEMS_FILE } from 'src/constants';\r\n\r\ninterface Status {\r\n  system: string;\r\n  band: string;\r\n  scope: number | null;\r\n}\r\ninterface BandMenusProps {\r\n  className?: string;\r\n  status: Status;\r\n  onUids: (param: number[]) => void;\r\n  onChange: (name: string, value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    textAlignLast: 'center'\r\n  },\r\n  default: {\r\n    color: colors.grey[500],\r\n    opacity: 0.9\r\n  }\r\n}));\r\n\r\nconst BandMenus: FC<BandMenusProps> = ({\r\n  className,\r\n  status,\r\n  onUids,\r\n  onChange\r\n}) => {\r\n  const [bands, setBands] = useState<string[]>([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    let result: string[] = [];\r\n    let tuids: number[] = [];\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = (e: ProgressEvent<EventTarget>) => {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      const sdata = workbook.Sheets[workbook.SheetNames[1]];\r\n      const worksheet: any = xlsx.utils.sheet_to_json(sdata, { header: 1 });\r\n\r\n      worksheet.forEach((el: any) => {\r\n        if (el[0] === status.system) {\r\n          el[2] && tuids.push(el[2]);\r\n          !result.includes(el[1]) && result.push(el[1]);\r\n        }\r\n      });\r\n      setBands(result);\r\n      onUids(tuids);\r\n    };\r\n\r\n    req.send();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [status.system]);\r\n\r\n  useEffect(() => {\r\n    bands.length > 0 && onChange('band', bands[0]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [bands]);\r\n\r\n  const handleChange = (event): void => {\r\n    const { name, value } = event.target;\r\n    onChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      name=\"band\"\r\n      value={status.band}\r\n      onChange={handleChange}\r\n      className={clsx(classes.root, className)}\r\n      defaultValue=\"none\"\r\n      fullWidth\r\n    >\r\n      <MenuItem value=\"none\" className={classes.default} disabled>\r\n        Select Frequency Band\r\n      </MenuItem>\r\n      {bands.map(item => (\r\n        <MenuItem value={item} key={item}>\r\n          {item}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nBandMenus.propTypes = {\r\n  className: PropTypes.string,\r\n  onUids: PropTypes.func,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default BandMenus;\r\n","import React, { useState, useEffect, FC, ChangeEvent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as xlsx from 'xlsx';\r\nimport _ from 'underscore';\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  makeStyles,\r\n  Theme,\r\n  colors,\r\n  Tooltip\r\n} from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport { Band } from 'src/types/band';\r\nimport { DATA_FILE } from 'src/constants';\r\n\r\ninterface Status {\r\n  system: string;\r\n  band: string;\r\n  scope: number | null;\r\n}\r\ninterface SpectrumProps {\r\n  className?: string;\r\n  uids: number[];\r\n  status: Status;\r\n  onContent: (param: string) => void;\r\n  onChange: (name: string, value: string | number) => void;\r\n}\r\n\r\nconst calWidth = (start: number, end: number, length: number) => {\r\n  const value = (Math.abs(start - end) / length) * 95;\r\n  return { width: value + '%' };\r\n};\r\n\r\nconst getKey = (value: string): string => {\r\n  return value.split(' ').join('_');\r\n};\r\n\r\nconst getStyle = (dt: Band, length: number) => {\r\n  const len = 40 / length + 'vh';\r\n  let value = {};\r\n\r\n  if (dt.vertical) {\r\n    value = {\r\n      writingMode: 'vertical-rl',\r\n      backgroundColor: dt.hex,\r\n      minHeight: len,\r\n      maxHeight: len,\r\n      transform: 'rotate(-180deg)'\r\n    };\r\n  } else {\r\n    value = {\r\n      backgroundColor: dt.hex,\r\n      minHeight: len,\r\n      maxHeight: len,\r\n      textAlign: 'center'\r\n    };\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    position: 'relative'\r\n  },\r\n  grid: {\r\n    minHeight: theme.spacing(2),\r\n    '&:before': {\r\n      content: 'attr(data-start)'\r\n    },\r\n    '&:after': {\r\n      content: 'attr(data-end)',\r\n      position: 'absolute',\r\n      right: theme.spacing(3),\r\n      top: 0\r\n    }\r\n  },\r\n  block: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    textAlign: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '1px solid #000',\r\n    cursor: 'pointer'\r\n  },\r\n  scoped: {\r\n    border: `3px solid ${colors.red[700]}`\r\n  },\r\n  service: {\r\n    fontSize: theme.typography.pxToRem(12)\r\n  },\r\n  remark: {\r\n    fontSize: theme.typography.pxToRem(10)\r\n  },\r\n  announce: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  box: {\r\n    width: '100%',\r\n    minHeight: theme.spacing(30),\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    display: 'flex'\r\n  },\r\n  clicked: {\r\n    boxShadow: theme.shadows[15],\r\n    border: `5px solid ${colors.red[700]}`,\r\n    zIndex: 1000\r\n  }\r\n}));\r\n\r\nconst Spectrum: FC<SpectrumProps> = ({\r\n  className,\r\n  uids,\r\n  status,\r\n  onChange,\r\n  onContent\r\n}) => {\r\n  const [source, setSource] = useState([]);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [length, setLength] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPage, setTotalPage] = useState(1);\r\n  const classes = useStyles();\r\n  const amount = 8;\r\n\r\n  useEffect(() => {\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', DATA_FILE, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = (e: ProgressEvent<EventTarget>) => {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      const worksheet: any = xlsx.utils.sheet_to_json(\r\n        workbook.Sheets[status.band],\r\n        {\r\n          header: 1\r\n        }\r\n      );\r\n      let sheetList = [];\r\n      let result = [];\r\n\r\n      if (Object.keys(worksheet).length > 2) {\r\n        worksheet.forEach((el: any, idx: number) => {\r\n          if (idx > 0) sheetList.push(_.object(worksheet[0], el));\r\n        });\r\n\r\n        sheetList.forEach((item: Band) => {\r\n          const data = sheetList.filter(el => item.master === el.master);\r\n          const count = _.filter(result, el => item.master === el.master);\r\n\r\n          if (count.length < 1 && item.master) {\r\n            result.push({\r\n              master: item.master,\r\n              start: item.start,\r\n              end: item.end,\r\n              data: data,\r\n              vertical: item.vertical\r\n            });\r\n          }\r\n        });\r\n        setSource(result);\r\n        setTotalPage(Object.keys(result).length / amount);\r\n        onContent(result[0].data[0].content);\r\n      } else {\r\n        handleInit();\r\n      }\r\n    };\r\n\r\n    req.send();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [status.band]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(source).length > 0) {\r\n      const pointS = source[(page - 1) * amount];\r\n      const pointF =\r\n        page < totalPage\r\n          ? source[page * amount - 1]\r\n          : source[totalPage * amount - 1];\r\n\r\n      if (pointF && Object.keys(pointF).includes('end')) {\r\n        const start = pointS.start ? pointS.start : 0;\r\n        const end = pointF.end ? pointF.end : 0;\r\n        const len = Math.abs(start - end);\r\n\r\n        let data = Object.values(source).filter(\r\n          (item: Band) =>\r\n            item.master > (page - 1) * amount && item.master <= page * amount\r\n        );\r\n        setLength(len);\r\n        setDataSource(data);\r\n      }\r\n    } else {\r\n      setLength(0);\r\n      setDataSource([]);\r\n    }\r\n  }, [page, source, totalPage]);\r\n\r\n  const handleInit = (): void => {\r\n    setSource([]);\r\n    setTotalPage(0);\r\n    setPage(1);\r\n    onChange('scope', null);\r\n    onContent('');\r\n  };\r\n\r\n  const handleClick = (value: number, content: string): void => {\r\n    onChange('scope', value);\r\n    onContent(content);\r\n  };\r\n\r\n  const handleChangePage = (e: ChangeEvent, page: number): void => {\r\n    setPage(page);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        style={{ position: 'relative' }}\r\n        className={clsx(className, classes.root)}\r\n      >\r\n        {Object.keys(dataSource).length === 0 && (\r\n          <Box\r\n            border={1}\r\n            borderColor={colors.blue[200]}\r\n            className={classes.box}\r\n            textAlign=\"center\"\r\n          >\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              No Band Data Entered Yet.\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        {Object.keys(dataSource).length > 0 &&\r\n          Object.values(dataSource).map((el, idx: number) => (\r\n            <Grid\r\n              item\r\n              key={el.master}\r\n              className={classes.grid}\r\n              style={calWidth(el.start, el.end, length)}\r\n              data-start={el.start}\r\n              data-end={idx === amount - 1 ? el.end : ''}\r\n            >\r\n              <Grid container alignItems=\"center\" justify=\"center\">\r\n                {el.data.map((dt: Band, index: number) => (\r\n                  <Tooltip\r\n                    key={`${getKey(dt.service)}-${idx}-${index}`}\r\n                    title={dt.service}\r\n                    arrow\r\n                  >\r\n                    <Grid\r\n                      item\r\n                      md={12}\r\n                      onClick={() => handleClick(dt.Item_No, dt.content)}\r\n                      style={getStyle(dt, el.data.length)}\r\n                      className={clsx(\r\n                        classes.block,\r\n                        uids.includes(dt.Item_No) && classes.scoped,\r\n                        uids.includes(dt.Item_No) &&\r\n                          dt.Item_No === status.scope &&\r\n                          classes.clicked\r\n                      )}\r\n                    >\r\n                      {!dt.truncated ? (\r\n                        <>\r\n                          <Typography className={classes.service}>\r\n                            {dt.service}\r\n                          </Typography>\r\n                          {dt.remark !== '' && (\r\n                            <Typography className={classes.remark}>\r\n                              {dt.remark}\r\n                            </Typography>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        <Typography className={classes.service}>\r\n                          {dt.truncated}\r\n                        </Typography>\r\n                      )}\r\n                    </Grid>\r\n                  </Tooltip>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        spacing={3}\r\n        className={classes.announce}\r\n      >\r\n        <Grid item md={9}>\r\n          <Typography variant=\"body1\">\r\n            This chart will only work with 1024 x 768. We recommend full screen\r\n            mode.\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item md={3}>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item md={12}>\r\n              <Pagination\r\n                count={Math.ceil(totalPage)}\r\n                page={page}\r\n                defaultPage={1}\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                onChange={handleChangePage}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nSpectrum.propTypes = {\r\n  className: PropTypes.string,\r\n  uids: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n  onContent: PropTypes.func\r\n};\r\n\r\nexport default Spectrum;\r\n","import React, { FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Grid, Typography, Box, makeStyles, Theme } from '@material-ui/core';\r\ninterface ContentProps {\r\n  className?: string;\r\n  content: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {}\r\n}));\r\n\r\nconst Content: FC<ContentProps> = ({ className, content }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={clsx(className, classes.root)}\r\n    >\r\n      <Grid item md={4}>\r\n        <Typography variant=\"h6\" component=\"strong\">\r\n          Regulatory Notes\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item md={8} />\r\n      <Grid item md={12}>\r\n        <Box borderColor=\"primary.main\" border={2} borderRadius={5} padding={2}>\r\n          <Typography variant=\"body2\">{content}</Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nContent.propTypes = {\r\n  className: PropTypes.string,\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Content;\r\n","import React, { forwardRef, ReactElement, Ref, FC } from 'react';\r\nimport {\r\n  CssBaseline,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Slide,\r\n  useMediaQuery,\r\n  makeStyles,\r\n  Theme\r\n} from '@material-ui/core';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: ReactElement<any, any> },\r\n  ref: Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  content: {\r\n    marginBottom: theme.spacing(6)\r\n  }\r\n}));\r\n\r\nconst Alert: FC = () => {\r\n  const matches = useMediaQuery('(max-width: 1000px)');\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog open={matches} TransitionComponent={Transition} keepMounted>\r\n      <CssBaseline />\r\n      <DialogTitle>Screen Resolution Alert</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText className={classes.content}>\r\n          Your screen resolution is under 1024 x 768. We can't confirm your\r\n          resolution of this Spectrum Chart. Please Check your screen mode\r\n          again.\r\n        </DialogContentText>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, FC } from 'react';\nimport {\n  Grid,\n  Container,\n  CssBaseline,\n  Card,\n  CardHeader,\n  Typography,\n  CardContent,\n  makeStyles,\n  Theme,\n  colors\n} from '@material-ui/core';\nimport SystemGantt from './SystemGantt';\nimport UserGantt from './UserGantt';\nimport SystemMenus from './SystemMenus';\nimport BandMenus from './BandMenus';\nimport Spectrum from './Spectrum';\nimport Content from './Content';\nimport Alert from './Alert';\n\ninterface Status {\n  system: string;\n  band: string;\n  scope: number | null;\n}\n\nconst initialStatus = {\n  system: 'none',\n  band: 'none',\n  scope: null\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    margin: theme.spacing(5)\n  },\n  card: {\n    padding: theme.spacing(2)\n  },\n  content: {\n    backgroundColor: colors.grey[50]\n  }\n}));\n\nconst Header: FC = () => {\n  return (\n    <Typography component=\"h1\" variant=\"h5\" color=\"textSecondary\">\n      Spectrum Dashboard\n    </Typography>\n  );\n};\n\nconst HomeView: FC = () => {\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [uids, setUids] = useState<number[]>([]);\n  const [content, setContent] = useState('');\n  const classes = useStyles();\n\n  const handleChange = (name: string, value: string): void => {\n    setStatus(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleContent = (value: string): void => {\n    setContent(value);\n  };\n\n  const handleUids = (value: number[]) => {\n    setUids(value);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <CssBaseline />\n        <Card className={classes.card}>\n          <CardHeader title={<Header />} />\n          <CardContent>\n            <Grid container alignItems=\"center\" spacing={3}>\n              <Grid item md={3}>\n                <SystemMenus system={status.system} onChange={handleChange} />\n              </Grid>\n              <Grid item md={3}>\n                <BandMenus\n                  status={status}\n                  onChange={handleChange}\n                  onUids={handleUids}\n                />\n              </Grid>\n              <Grid item md={12}>\n                <Spectrum\n                  uids={uids}\n                  status={status}\n                  onChange={handleChange}\n                  onContent={handleContent}\n                />\n              </Grid>\n              <Grid item md={12} className={classes.content}>\n                {content && content !== '' && <Content content={content} />}\n              </Grid>\n              <Grid item md={12}>\n                <SystemGantt scope={status.scope} band={status.band} />\n              </Grid>\n              <Grid item md={12}>\n                <UserGantt scope={status.scope} system={status.system} />\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Container>\n      <Alert />\n    </div>\n  );\n};\n\nexport default HomeView;\n","import React, { useEffect } from 'react';\nimport type { FC } from 'react';\nimport NProgress from 'nprogress';\nimport {\n  Box,\n  LinearProgress,\n  makeStyles,\n  Theme,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    minHeight: '100%',\n    padding: theme.spacing(3)\n  }\n}));\n\nconst LoadingScreen: FC = () => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    NProgress.start();\n\n    return () => {\n      NProgress.done();\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Box width={400}>\n        <LinearProgress />\n      </Box>\n    </div>\n  );\n};\n\nexport default LoadingScreen;\n","import React, { Suspense, Fragment, lazy } from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\nimport HomeView from 'src/views/home/HomeView';\nimport LoadingScreen from 'src/components/LoadingScreen';\n\ntype Routes = {\n  exact?: boolean;\n  path?: string | string[];\n  component?: any;\n  routes?: Routes;\n}[];\n\nexport const renderRoutes = (routes: Routes = []): JSX.Element => (\n  <Suspense fallback={<LoadingScreen />}>\n    <Switch>\n      {routes.map((route, i) => {\n        const Component = route.component;\n\n        return (\n          <Route\n            key={i}\n            path={route.path}\n            exact={route.exact}\n            render={props => (\n              <Fragment>\n                {route.routes ? (\n                  renderRoutes(route.routes)\n                ) : (\n                  <Component {...props} />\n                )}\n              </Fragment>\n            )}\n          />\n        );\n      })}\n    </Switch>\n  </Suspense>\n);\n\nconst routes: Routes = [\n  {\n    exact: true,\n    path: '/404',\n    component: lazy(() => import('src/views/errors/NotFoundView'))\n  },\n  {\n    exact: true,\n    path: '/maintenance',\n    component: lazy(() => import('src/views/maintenance/MaintenanceView'))\n  },\n  {\n    exact: true,\n    path: '/',\n    component: HomeView\n  },\n  {\n    path: '*',\n    routes: [\n      {\n        component: () => <Redirect to=\"/404\" />\n      }\n    ]\n  }\n];\n\nexport default routes;\n","import React, { FC } from 'react';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { create } from 'jss';\nimport { SnackbarProvider } from 'notistack';\nimport { jssPreset, StylesProvider } from '@material-ui/core';\nimport routes, { renderRoutes } from 'src/routes';\n\nconst jss = create({ plugins: [...jssPreset().plugins] });\nconst history = createBrowserHistory();\n\nconst App: FC = () => {\n  return (\n    <StylesProvider jss={jss}>\n      <SnackbarProvider dense maxSnack={3}>\n        <Router history={history}>{renderRoutes(routes)}</Router>\n      </SnackbarProvider>\n    </StylesProvider>\n  );\n};\n\nexport default App;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport 'nprogress/nprogress.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { enableES5 } from 'immer';\nimport * as serviceWorker from 'src/serviceWorker';\nimport App from 'src/App';\n\nenableES5();\n\nReactDOM.render(\n  <HelmetProvider>\n    <App />\n  </HelmetProvider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","const formatDate = (value: number, delta: number) => {\r\n  if (!value) return '';\r\n\r\n  let sDate = Math.floor(value - 25569) * 86400;\r\n  let lDate = new Date(sDate * 1000);\r\n  let d = lDate.getDate();\r\n  let dd = d < 10 ? '0' + d : d;\r\n  let yyyy = lDate.getFullYear();\r\n  let mon = lDate.getMonth() + 1;\r\n  let mm = mon < 10 ? '0' + mon : mon;\r\n\r\n  return yyyy + delta + '-' + mm + '-' + dd;\r\n};\r\n\r\nexport default formatDate;\r\n"],"sourceRoot":""}